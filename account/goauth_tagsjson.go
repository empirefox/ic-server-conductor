// DO NOT EDIT!
// Code generated by ffjson <https://github.com/empirefox/tagsjson>
// source: goauth.go
// DO NOT EDIT!

package account

import (
	"bytes"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (vj *OauthProvider) ValidateTag(t int) (map[string][]string, bool) {
	switch t {

	case PrdSave:
		return vj.ValidateTag_PrdSave()

	}
	return map[string][]string{"invalid_validation_tag": {"Validate tag not found"}}, false
}

func (vj *OauthProvider) ValidateTag_PrdSave() (map[string][]string, bool) {
	errs := make(map[string][]string, 0)

	errs_Name := make([]string, 0)
	if length := len(vj.Name); length != 0 {

		if length > 255 {
			errs_Name = append(errs_Name, "lmax(255)")
		}

	} else {
		errs_Name = append(errs_Name, "required")
	}
	if len(errs_Name) != 0 {
		errs["Name"] = errs_Name
	}

	errs_ClientID := make([]string, 0)
	if length := len(vj.ClientID); length != 0 {

		if length > 255 {
			errs_ClientID = append(errs_ClientID, "lmax(255)")
		}

	} else {
		errs_ClientID = append(errs_ClientID, "required")
	}
	if len(errs_ClientID) != 0 {
		errs["ClientID"] = errs_ClientID
	}

	errs_ClientSecret := make([]string, 0)
	if length := len(vj.ClientSecret); length != 0 {

		if length > 255 {
			errs_ClientSecret = append(errs_ClientSecret, "lmax(255)")
		}

	} else {
		errs_ClientSecret = append(errs_ClientSecret, "required")
	}
	if len(errs_ClientSecret) != 0 {
		errs["ClientSecret"] = errs_ClientSecret
	}

	if len(errs) != 0 {
		return errs, false
	}
	return nil, true
}

// Must be []OauthProvider or []*OauthProvider
func (ms OauthProviders) MarshalTagJSON(t int) ([]byte, error) {
	var buf fflib.Buffer
	buf.WriteString("[ ")
	for i := range ms {
		if err := ms[i].MarshalTagJSONBuf(t, &buf); err != nil {
			return nil, err
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte(']')
	return buf.Bytes(), nil
}

func (mj *OauthProvider) MarshalTagJSON(t int) ([]byte, error) {
	var buf fflib.Buffer
	if err := mj.MarshalTagJSONBuf(t, &buf); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (mj *OauthProvider) MarshalTagJSONBuf(t int, buf fflib.EncodingBuffer) error {
	switch t {
	case PrdSatellizer:
		return mj.MarshalTagJSON_PrdSatellizer(buf)
	}
	return fmt.Errorf("Marshal tag not found")
}

func (mj *OauthProvider) MarshalTagJSON_PrdSatellizer(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if len(mj.Name) != 0 {
		buf.WriteString(`"Name":`)
		fflib.WriteJsonString(buf, string(mj.Name))
		buf.WriteByte(',')
	}
	if len(mj.ClientID) != 0 {
		buf.WriteString(`"ClientID":`)
		fflib.WriteJsonString(buf, string(mj.ClientID))
		buf.WriteByte(',')
	}
	if mj.Disabled != false {
		if mj.Disabled {
			buf.WriteString(`"Disabled":true`)
		} else {
			buf.WriteString(`"Disabled":false`)
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

func (uj *OauthProvider) UnmarshalTagJSON(input []byte, t int) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalTagJSONLexer(t, fs, fflib.FFParse_map_start)
}

func (uj *OauthProvider) UnmarshalTagJSONLexer(t int, fs *fflib.FFLexer, state fflib.FFParseState) error {
	switch t {

	case PrdSave:
		return uj.UnmarshalTagJSON_PrdSave(fs, fflib.FFParse_map_start)

	}
	return fmt.Errorf("Unmarshal tag not found")
}

const (
	ffj_t_OauthProvider_PrdSavebase = iota
	ffj_t_OauthProvider_PrdSaveno_such_key
	ffj_t_OauthProvider_PrdSave_ID
	ffj_t_OauthProvider_PrdSave_Name
	ffj_t_OauthProvider_PrdSave_ClientID
	ffj_t_OauthProvider_PrdSave_ClientSecret
	ffj_t_OauthProvider_PrdSave_Disabled
)

var (
	ffj_k_OauthProvider_PrdSave_ID           = []byte("ID")
	ffj_k_OauthProvider_PrdSave_Name         = []byte("Name")
	ffj_k_OauthProvider_PrdSave_ClientID     = []byte("ClientID")
	ffj_k_OauthProvider_PrdSave_ClientSecret = []byte("ClientSecret")
	ffj_k_OauthProvider_PrdSave_Disabled     = []byte("Disabled")
)

func (uj *OauthProvider) UnmarshalTagJSON_PrdSave(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_OauthProvider_PrdSavebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_OauthProvider_PrdSaveno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'C':

					if bytes.Equal(ffj_k_OauthProvider_PrdSave_ClientID, kn) {
						currentKey = ffj_t_OauthProvider_PrdSave_ClientID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_k_OauthProvider_PrdSave_ClientSecret, kn) {
						currentKey = ffj_t_OauthProvider_PrdSave_ClientSecret
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'D':

					if bytes.Equal(ffj_k_OauthProvider_PrdSave_Disabled, kn) {
						currentKey = ffj_t_OauthProvider_PrdSave_Disabled
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'I':

					if bytes.Equal(ffj_k_OauthProvider_PrdSave_ID, kn) {
						currentKey = ffj_t_OauthProvider_PrdSave_ID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'N':

					if bytes.Equal(ffj_k_OauthProvider_PrdSave_Name, kn) {
						currentKey = ffj_t_OauthProvider_PrdSave_Name
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_k_OauthProvider_PrdSave_Disabled, kn) {
					currentKey = ffj_t_OauthProvider_PrdSave_Disabled
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_k_OauthProvider_PrdSave_ClientSecret, kn) {
					currentKey = ffj_t_OauthProvider_PrdSave_ClientSecret
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_k_OauthProvider_PrdSave_ClientID, kn) {
					currentKey = ffj_t_OauthProvider_PrdSave_ClientID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_k_OauthProvider_PrdSave_Name, kn) {
					currentKey = ffj_t_OauthProvider_PrdSave_Name
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_k_OauthProvider_PrdSave_ID, kn) {
					currentKey = ffj_t_OauthProvider_PrdSave_ID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_OauthProvider_PrdSaveno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_OauthProvider_PrdSave_ID:
					goto handle_ID

				case ffj_t_OauthProvider_PrdSave_Name:
					goto handle_Name

				case ffj_t_OauthProvider_PrdSave_ClientID:
					goto handle_ClientID

				case ffj_t_OauthProvider_PrdSave_ClientSecret:
					goto handle_ClientSecret

				case ffj_t_OauthProvider_PrdSave_Disabled:
					goto handle_Disabled

				case ffj_t_OauthProvider_PrdSaveno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ID:

	/* handler: uj.ID type=uint kind=uint quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.ID = uint(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Name:

	/* handler: uj.Name type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Name = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ClientID:

	/* handler: uj.ClientID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ClientID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ClientSecret:

	/* handler: uj.ClientSecret type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ClientSecret = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Disabled:

	/* handler: uj.Disabled type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.Disabled = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.Disabled = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
