// DO NOT EDIT!
// Code generated by ffjson <https://github.com/empirefox/tagsjson>
// source: account.go
// DO NOT EDIT!

package account

import (
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *Account) MarshalTagJSON(t int) ([]byte, error) {
	var buf fflib.Buffer
	if err := mj.MarshalTagJSONBuf(t, &buf); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (mj *Account) MarshalTagJSONBuf(t int, buf fflib.EncodingBuffer) error {
	switch t {
	case UserInfo:
		return mj.MarshalTagJSON_UserInfo(buf)
	}
	return fmt.Errorf("Marshal tag not found")
}

func (mj *Account) MarshalTagJSON_UserInfo(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if mj.ID != 0 {
		buf.WriteString(`"ID":`)
		fflib.FormatBits2(buf, uint64(mj.ID), 10, false)
		buf.WriteByte(',')
	}
	if len(mj.Name) != 0 {
		buf.WriteString(`"Name":`)
		fflib.WriteJsonString(buf, string(mj.Name))
		buf.WriteByte(',')
	}
	if len(mj.Dsc) != 0 {
		buf.WriteString(`"Dsc":`)
		fflib.WriteJsonString(buf, string(mj.Dsc))
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

// Must be []AccountOne or []*AccountOne
func (ms AccountOnes) MarshalTagJSON(t int) ([]byte, error) {
	var buf fflib.Buffer
	buf.WriteString("[ ")
	for i := range ms {
		if err := ms[i].MarshalTagJSONBuf(t, &buf); err != nil {
			return nil, err
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte(']')
	return buf.Bytes(), nil
}

func (mj *AccountOne) MarshalTagJSON(t int) ([]byte, error) {
	var buf fflib.Buffer
	if err := mj.MarshalTagJSONBuf(t, &buf); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (mj *AccountOne) MarshalTagJSONBuf(t int, buf fflib.EncodingBuffer) error {
	switch t {
	case ViewByShare:
		return mj.MarshalTagJSON_ViewByShare(buf)

	case ViewByViewer:
		return mj.MarshalTagJSON_ViewByViewer(buf)
	}
	return fmt.Errorf("Marshal tag not found")
}

func (mj *AccountOne) MarshalTagJSON_ViewByViewer(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if mj.OneId != 0 {
		buf.WriteString(`"OneId":`)
		fflib.FormatBits2(buf, uint64(mj.OneId), 10, false)
		buf.WriteByte(',')
	}
	if len(mj.ViewByViewer) != 0 {
		buf.WriteString(`"ViewByViewer":`)
		fflib.WriteJsonString(buf, string(mj.ViewByViewer))
		buf.WriteByte(',')
	}
	if true {
		buf.WriteString(`"CreatedAt":`)

		{

			obj, err = mj.CreatedAt.MarshalJSON()
			if err != nil {
				return err
			}
			buf.Write(obj)

		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

func (mj *AccountOne) MarshalTagJSON_ViewByShare(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if mj.AccountId != 0 {
		buf.WriteString(`"AccountId":`)
		fflib.FormatBits2(buf, uint64(mj.AccountId), 10, false)
		buf.WriteByte(',')
	}
	if len(mj.ViewByShare) != 0 {
		buf.WriteString(`"ViewByShare":`)
		fflib.WriteJsonString(buf, string(mj.ViewByShare))
		buf.WriteByte(',')
	}
	if true {
		buf.WriteString(`"CreatedAt":`)

		{

			obj, err = mj.CreatedAt.MarshalJSON()
			if err != nil {
				return err
			}
			buf.Write(obj)

		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

func (mj *Oauth) MarshalTagJSON(t int) ([]byte, error) {
	var buf fflib.Buffer
	if err := mj.MarshalTagJSONBuf(t, &buf); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (mj *Oauth) MarshalTagJSONBuf(t int, buf fflib.EncodingBuffer) error {
	switch t {
	case UserInfo:
		return mj.MarshalTagJSON_UserInfo(buf)
	}
	return fmt.Errorf("Marshal tag not found")
}

func (mj *Oauth) MarshalTagJSON_UserInfo(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if mj.ID != 0 {
		buf.WriteString(`"ID":`)
		fflib.FormatBits2(buf, uint64(mj.ID), 10, false)
		buf.WriteByte(',')
	}
	if len(mj.Name) != 0 {
		buf.WriteString(`"Name":`)
		fflib.WriteJsonString(buf, string(mj.Name))
		buf.WriteByte(',')
	}
	if true {
		buf.WriteString(`"Account":`)

		{

			err = mj.Account.MarshalTagJSON_UserInfo(buf)
			if err != nil {
				return err
			}

		}
		buf.WriteByte(',')
	}
	if mj.AccountId != 0 {
		buf.WriteString(`"AccountId":`)
		fflib.FormatBits2(buf, uint64(mj.AccountId), 10, false)
		buf.WriteByte(',')
	}
	if len(mj.Picture) != 0 {
		buf.WriteString(`"Picture":`)
		fflib.WriteJsonString(buf, string(mj.Picture))
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

// Must be []One or []*One
func (ms Ones) MarshalTagJSON(t int) ([]byte, error) {
	var buf fflib.Buffer
	buf.WriteString("[ ")
	for i := range ms {
		if err := ms[i].MarshalTagJSONBuf(t, &buf); err != nil {
			return nil, err
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte(']')
	return buf.Bytes(), nil
}

func (mj *One) MarshalTagJSON(t int) ([]byte, error) {
	var buf fflib.Buffer
	if err := mj.MarshalTagJSONBuf(t, &buf); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (mj *One) MarshalTagJSONBuf(t int, buf fflib.EncodingBuffer) error {
	switch t {
	case UserRooms:
		return mj.MarshalTagJSON_UserRooms(buf)
	}
	return fmt.Errorf("Marshal tag not found")
}

func (mj *One) MarshalTagJSON_UserRooms(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if mj.ID != 0 {
		buf.WriteString(`"ID":`)
		fflib.FormatBits2(buf, uint64(mj.ID), 10, false)
		buf.WriteByte(',')
	}
	if true {
		buf.WriteString(`"CreatedAt":`)

		{

			obj, err = mj.CreatedAt.MarshalJSON()
			if err != nil {
				return err
			}
			buf.Write(obj)

		}
		buf.WriteByte(',')
	}
	if true {
		buf.WriteString(`"UpdatedAt":`)

		{

			obj, err = mj.UpdatedAt.MarshalJSON()
			if err != nil {
				return err
			}
			buf.Write(obj)

		}
		buf.WriteByte(',')
	}
	if len(mj.Name) != 0 {
		buf.WriteString(`"Name":`)
		fflib.WriteJsonString(buf, string(mj.Name))
		buf.WriteByte(',')
	}
	if len(mj.Dsc) != 0 {
		buf.WriteString(`"Dsc":`)
		fflib.WriteJsonString(buf, string(mj.Dsc))
		buf.WriteByte(',')
	}
	if mj.Enabled != false {
		if mj.Enabled {
			buf.WriteString(`"Enabled":true`)
		} else {
			buf.WriteString(`"Enabled":false`)
		}
		buf.WriteByte(',')
	}
	if mj.OwnerId != 0 {
		buf.WriteString(`"OwnerId":`)
		fflib.FormatBits2(buf, uint64(mj.OwnerId), 10, false)
		buf.WriteByte(',')
	}
	if len(mj.Ver) != 0 {
		buf.WriteString(`"Ver":`)
		fflib.WriteJsonString(buf, string(mj.Ver))
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}
